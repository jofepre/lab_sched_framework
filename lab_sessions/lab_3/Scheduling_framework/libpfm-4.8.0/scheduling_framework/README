	——————————————————————————————————————————————————————————————
			Lab Scheduling Framework:
		a scheduling framework designed to be used in 
		lab sessions of computer architecture courses

	     Copyright (c) 2017 Univesitat Politecnica de Valencia
	        Contributed by Josue Feliu <jofepre@gap.upv.es>
	——————————————————————————————————————————————————————————————

This package provides an scheduling framework aimed at lab sessions of
computer architecture courses. The scheduling framework uses the libpfm4
library to access and collet performance counters. 


COMPILATION
-------------

The framework can be compiled simply by a make command.	


DOCUMENTATION
-------------

Scheudling_framework.c is the main file of the project. It performs the basic
operations to launch and monitor a workload. However, to make it easier to
modify by students of the lab sessions, its operation is split in the above
described modules. 

- sf_auxiliar: this module includes the defines and struct declarations as well
as the declaration of global variables and several functions to manage the
operations with nodes (the structure that contains the process related
information) and the queues of processes.

- sf_performance_monitoring: this module includes the functions related with
the monitoring of the execution of the processes using performance counters.
It includes the update_metrics () function. Depending of the string of events
requested to monitor, it might be required to update the calculation of some
metrics in this function.

- sf_process_selection: this module includes the functions related with
the process selection step of the scheduler. A new process selection function
should be incorporated to this module.

- sf_process_allocation: this module includes the functions related with
the process allocation step of the scheduler. A new process allocation function
should be incorporated to this module.


TO BE EDITED TAGS
-------------

The source code includes tags “TO EDIT” at several points of the source code. 
The tags are accompanied with an small description explaining why it might be
required to edit this part. For instance, in the declaration of defines it is
set the frequency of the processor, which should be updated according to the
experimental platform to provide correct statistics. Other tags are included
to highlight parts of the source code that could be related with exercises of 
the lab sessions. For instance, the points where bandwidth utilization should
be updated or where performance metrics are calculated.

The execution orders of the processes, present in the scheduling_framework.c
file need to be updated to point to the actual location of the binaries and 
files.
In addition, the target number of instructions and IPC of the applications
should also be updated according to the experimental platform. To measure the
target number of instructions, set this number to a very high number (e.g., 
100000000000) and limit the time of the execution:

./scheduling_framework -N 1 -C 0 -W0 -d 200 -p -T 20

where the -T 20 options limits the execution to 20 seconds. The number of 
instructions of this run should be used to updated the target number of 
instructions for the application.



HELP & FEEDBACK
-------------

I will be glad to answer any question regarding the lab scheduling framework,
as well as, to receive any feedback that helps improving int.



PENDING TASKS
-------------

- Adding the source code of the microbenchmarks
- Adding scripts to enable / disable prefetch.



PROPOSED LAB SESSIONS
-------------

In our paper “Designing Lab Sessions Focusing on Real Processors for Computer 
Architecture Courses: A Practical Perspective” we propose five examples of
lab sessions that could be carried out in different computer architecture
courses.



Lab Example 1. Understanding the Basics on Cache Hierarchy Performance and 
System Performance (Basic Level).

In this lab sessions, the framework can be used as a black box and does not
require any modification of the source code. In our experimental platform,
the required experiments can be launched as follows:
(Depending on the libpfm-4.8.0 installation and the user permissions, 
it might be required to launch the framework as sudo to read performance counters)

./scheduling_framework -N 1 -C 0 -W 0 -d 200 -p -e "UNHALTED_CORE_CYCLES,INSTRUCTIONS_RETIRED,PERF_COUNT_HW_CACHE_L1D:ACCESS,PERF_COUNT_HW_CACHE_L1D:MISS,LLC_REFERENCES,LLC_MISSES"

where,
-N 1	-> indicates that only one core is going to be used
-C 0	-> indicates the list of cores to be used
-W 0	-> indicates the workload composition; in this case, only the process with id 0
-d 200	-> indicates the quantum length (ms)
-p 	-> requests the scheduling framework to print per-quantum event counts
-e “”	-> indicates the list of events to be monitored



Lab Example 2. Lab Example 2. Prefetching and Issue Stalls (Intermediate Level).

As in the previous lab, the scheduling framework can be used as a black box. 

./scheduling_framework -N 1 -C 0 -W 0 -d 200 -p -e "UNHALTED_CORE_CYCLES,INSTRUCTIONS_RETIRED,CYCLE_ACTIVITY:STALLS_L2_PENDING,CYCLE_ACTIVITY:STALLS_LDM_PENDING,CYCLE_ACTIVITY:CYCLES_NO_EXECUTE"

where,
-N 1	-> indicates that only one core is going to be used
-C 0	-> indicates the list of cores to be used
-W 0	-> indicates the workload composition; in this case, only the process with id 0
-d 200	-> indicates the quantum length (ms)
-p 	-> requests the scheduling framework to print per-quantum event counts
-e “”	-> indicates the list of events to be monitored



Lab Example 3. Inter-thread Interferences: Bandwidth Contention through the Memory Hierarchy (Intermediate Level).

This lab can also be done using the scheduling framework as a black box, but requires
launching multiple application concurrently.

./scheduling_framework -N 4 -C 0,1,2,3 -W 0,1,1,1 -d 200 -p -e "UNHALTED_CORE_CYCLES,INSTRUCTIONS_RETIRED,LLC_REFERENCES,LLC_MISSES"

where,
-N 4		-> indicates that four cores are going to be used
-C 0,1,2,3	-> indicates the list of cores to be used
-W 0,1,1,1	-> indicates the workload composition; in this case, one process with id 0 and three processes with id 1 (they could be the bandwidth-consuming microbenchmarks)
-d 200		-> indicates the quantum length (ms)
-p 		-> requests the scheduling framework to print per-quantum event counts
-e “”		-> indicates the list of events to be monitored



Lab Example 4. Main Memory Bandwidth-Aware Scheduling (Advanced Level).

This lab proposes the implementation of a process selection policy. 
Thus, students should work on the sf_process_selection module.
The following command can be issued to launch an experiment specifying 
the process selection policy.

./scheduling_framework -N 4 -C 0,1,2,3 -W 0,1,1,1 -d 200 -S 2 -p -e "UNHALTED_CORE_CYCLES,INSTRUCTIONS_RETIRED,LLC_REFERENCES,LLC_MISSES"

where,
-S 2		-> indicates the use of the process selection policy with id 2



Lab Example 5. Process to Core Allocation in SMT Processors (Advanced Level)

This lab proposes the implementation of a process allocation policy.
Thus, students should work on the sf_process_allocation module.
It is aimed at SMT processors and thus particular emphasis should be 
made on the configuration of the available cores.

./scheduling_framework -N 4 -C 0,1,2,3 -W 0,1,2,3 -d 200 -A 2 -p -e "UNHALTED_CORE_CYCLES,INSTRUCTIONS_RETIRED,PERF_COUNT_HW_CACHE_L1D:ACCESS,PERF_COUNT_HW_CACHE_L1D:MISS"

where,
-N 4		-> indicates that four cores are going to be used
-C 0,1,2,3	-> indicates the list of cpus to be used (IMPORTANT: the first two cpus should be the two logical CPUs that belong to the same physical core, 
		   the next two the ones that belong to the second core, and so on…) 
-W 0,1,2,3	-> indicates the workload composition; in this case, an instance of the applications with id 0, 1, 2, and 3
-A 2		-> indicates the use of the process allocation policy with id 2






	
